%==== Script of 3DEnVar===
%=== Based in the Paper: "A review of operational methods of variational 
% and ensemble-variational data assimilation" R.N. Bannister
clear all
close all
clc

%==== Parameters====


%===Model Parameters===
load Xreal %True state
tic
n=40; %Number of states
F=8; %External force
N_exp=100;

%===Observation Parameters===
for obs=1:2
p_obsersation=[0.7 1];  %Fraction of observabled states
m=round(n*p_obsersation(obs)); % Number of observations
sigma=0.01; %Observation error
R=sigma^2*eye(m,m);
inR=(1/sigma^2)*eye(m,m);
H = eye(n,n); 
salidas=randperm(n,m);
H = H(salidas,:);  %Matrix;% that maps the state space into the observation space

tipo=7;
    for freq=1:3
    %===Simulation Parameters===
%     tsim=500; %Time steps simulation
    dt=0.01; %step length
    M=25;
    frequency=[1 5 10]; % Frequency of observations
    tsim=frequency(freq)*M;
    y=zeros(m,tsim);
    yxa=zeros(m,tsim);
    muestreo=frequency(freq):frequency(freq):tsim;
    pf=0.08;
        for en=1:3
            
        %=== DA parameters===
        Ensem=[20 40 80];
        N=Ensem(en); % Number of ensemble
            for rad=1:4
                radius=[1 5 10 15];
                r=radius(rad); %Localization radius
                for gamma=1:5
                    Gamma=[1 2 3 4 5];    
                    global gam
                    gam=Gamma(gamma); %Gamma observation operator
                    eps=0.01; %Tolerance rho calculation
                    q=round(log2(1/eps)); %Number of iterations rho calculation
                    inner=100; % Max Number of inner iterations
                    tolerance_inner=0.01;
                    if ((gam==4 || gam==5) && (N==80 || N==40) )
                        add_inflation=0.1; 
                    elseif ((gam==4 || gam==5) && (N==20) )
                    	add_inflation=0.1; 
                    else
                       add_inflation=0.1; 
                    end
                    
                   
                    % gam=1,N=80--infla=0.5,N=40--infla=0.5,N=20--infla=0.5;
                    % gam=2,N=80--infla=0.5,N=40--infla=0.5,N=20--infla=0.5;
                    % gam=3,N=80--infla=0.5,N=40--infla=0.5,N=20--infla=0.5;
                    % gam=4,N=80--infla=0.1,N=40--infla=0.1,N=20--infla=0.05;
                    % gam=5,N=80--infla=0.1,N=40--infla=0.1,N=20--infla=0.05;

                    %====Simulation====
                    %===Initialization===
                    for exp=1:N_exp
                        if exp>50
                            add_inflation=0.5; 
                        end
                        N_errores(obs,freq,en,rad,gamma,exp)=0;
                        xb=zeros(n,tsim,N); % Background State. Dimensions=(states,time,ensemble member)
                        Xb=zeros(n,N);
                        muestra=0;
                        %===Ensemble generation===
                        ensemble_sparse=10;
                        x0=ensemble_sparse*rand(n,N); %The ensemble is generated by the initial condition
                        xb(:,1,:)=x0;
                        xa=xb;
                        meanxb=mean(xb(:,1,:),3);
                        Hx = operador(salidas,meanxb,tipo);
                        XB_time=zeros(n,N,tsim);
                        meanxa(:,1)=meanxb;
                        for i=2:tsim
                        %===Outer Loop===    
                            for Nen=1:N %Propagation in time of all the ensemble members
                                [xb(:,i,Nen),t]=Lorenz_96_one_step(1,dt,squeeze(xa(:,i-1,Nen)),F);  
                            end
                         meanxb=mean(xb(:,i,:),3); %Ensemble mean
                         if sum(muestreo==i)   %Validation if there are a observation available
                             muestra=muestra+1;
                             for Nen=1:N
                                Xb(:,Nen)= xb(:,i,Nen)-meanxb;  
                             end
                             Xb=Xb*sqrt(1/(N-1));   
                             XB_time(:,:,i)=Xb; 
                             try [B,Bsquare]=Calculo_B_Cholesky(Xb,r); %Estimation of Covariance by Modified Cholesky                             catch
                             catch    
                                 N_errores(obs,freq,en,rad,gamma,exp)=N_errores(obs,freq,en,rad,gamma,exp)+1;
                             continue
                             end
                             inB=Calculo_inB_Cholesky(Xb,r); %Estimation of inverse Covariance by Modified Cholesky
                            %  Bsquare=sqrtm(B);
                             y(:,i)=operador(salidas,Xreal(:,i),tipo)+sigma*randn(m,1); % Observations
                             %==Inner Loop==
                                 alpha=zeros(n,inner);
                                 alpha(:,1)=rand(n,1);
                                 xk=zeros(n,inner);
                                 xk(:,1)=meanxb+Bsquare*alpha(:,1);
                                 H = linear_operador(salidas,meanxb,tipo);
                                 Q=H*Bsquare;
                                 yxk=operador(salidas,xk(:,1),tipo);
                                 d=(y(:,i)-yxk);  %Innovation Matriz
                                 k=2;
                                 norma(1,i)=tolerance_inner;
                                 flaq=0;
                                  while norma(k-1,i)>=tolerance_inner && k<inner && flaq<2 

                                     try alpha(:,k)= pinv((eye(n,1)+Q'*inR*Q),0.01)*(Q'*inR*d)-sum(alpha(:,1:k-1),2);
                                     catch
                                         N_errores(obs,freq,en,rad,gamma,exp)=N_errores(obs,freq,en,rad,gamma,exp)+1;
                                         k=k+1;
                                         continue
                                     end
                                     %=Calculate of rho=

                                     try [rho,J1,J2,J3]=rho_calculation(q,xk(:,k-1),Bsquare,alpha(:,k),y(:,i),inB,inR,H,meanxb);
                                     catch    
                                        N_errores(obs,freq,en,rad,gamma,exp)=N_errores(obs,freq,en,rad,gamma,exp)+1;
                                        k=k+1;
                                        continue
                                     end
                                     %=Incremental=
                                     xk(:,k)=xk(:,k-1)+rho*Bsquare*alpha(:,k);
                                     yxk=operador(salidas,xk(:,k),tipo);
                                     d=(y(:,i)-yxk);
                                     norma(k,i)=norm(rho*Bsquare*alpha(:,k));
                                     if diff(norma(k-1:k,i))>0 
                                         flaq=flaq+1;          
                                     end
                                     if flaq==2
                                        alpha(:,k)=alpha(:,k-1); 
                                        xk(:,k)=xk(:,k-1);
                                     end
                                     k=k+1;
                                 end
                                 meanxa(:,i)=(xk(:,k-1));
                                 mean(d);
                                 yxa(:,i)=operador(salidas,meanxa(:,i),tipo);
                                 for mobs=1:m
                                     yxa_exp(obs,freq,en,rad,gamma,exp,mobs,i)=yxa(mobs,i);
                                     y_exp(obs,freq,en,rad,gamma,exp,mobs,i)=y(mobs,i);
                                 end
                                 
                            %==End Inner Loop==
                            %=Analysis ensemble calculation=
                             for Nen=1:N
                                 try alpha_a=sum(alpha(:,1:k-1),2).*randn(n,1);
                                 catch    
                                    N_errores(obs,freq,en,rad,gamma,exp)=N_errores(obs,freq,en,rad,gamma,exp)+1;
                                    continue
                                  end
                                  xa(:,i,Nen)=(meanxa(:,i)+rho*Bsquare*alpha_a);
                             end
                             aux=squeeze(xa(:,i,:));
                             xa(:,i,:)=aux+pf*(randn(n,N).*meanxa(:,i));
                           
                                norma_error(obs,freq,en,rad,gamma,exp,i)=norm((y(:,i)-yxa(:,i))./y(:,i),2);
                                norma_error_muestras(obs,freq,en,rad,gamma,exp,muestra)=norm((y(:,i)-yxa(:,i))./y(:,i),2);
                                norma_error_x(obs,freq,en,rad,gamma,exp,i)=norm((Xreal(:,i)-meanxa(:,i))./Xreal(:,i),2);
                                norma_error_muestras_x(obs,freq,en,rad,gamma,exp,muestra)=norm((Xreal(:,i)-meanxa(:,i))./Xreal(:,i),2);
                             else
                                 xa(:,i,:)=xb(:,i,:);
                                 meanxa(:,i)=meanxb;
                                 yxa(:,i)=operador(salidas,meanxa(:,i),tipo);
                                 y(:,i)=operador(salidas,Xreal(:,i),tipo)+sigma*randn(m,1);
                                 norma_error(obs,freq,en,rad,gamma,exp,i)=norm((y(:,i)-yxa(:,i))./y(:,i),2);
                                  norma_error_x(obs,freq,en,rad,gamma,exp,i)=norm((Xreal(:,i)-meanxa(:,i))./Xreal(:,i),2);
                                 for mobs=1:m
                                     yxa_exp(obs,freq,en,rad,gamma,exp,mobs,i)=yxa(mobs,i);
                                     y_exp(obs,freq,en,rad,gamma,exp,mobs,i)=y(mobs,i);
                                 end
                         end
                          process=i/tsim*100;
                        end
                       experimento=['% Obs: ',num2str(p_obsersation(obs)),',Freq obs: ',num2str(frequency(freq)), ', N ens: ', num2str(N),', Loc rad: ', num2str(r),', Gamma H: ', num2str(gam), ', # Expe: ', num2str(exp), '# Errores: ', num2str(N_errores(obs,freq,en,rad,gamma,exp)) ];
                       disp(experimento)
                    end
                end
            end
        end
    end
end


toc
 filename = 'workspace_proof_100exp_V7.mat';
save(filename)
Graficas_V2
 