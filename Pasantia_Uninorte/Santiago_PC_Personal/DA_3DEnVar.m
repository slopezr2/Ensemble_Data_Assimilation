%==== Script of 3DEnVar===
%=== Based in the Paper: "A review of operational methods of variational 
% and ensemble-variational data assimilation" R.N. Bannister
clear all
close all
clc

%==== Parameters====
%===Model Parameters===
load Xreal %True state
n=40; %Number of states
F=8; %External force

%===Observation Parameters===
p_obsersation=1;  %Fraction of observabled states
m=round(n*p_obsersation); % Number of observations
sigma=0.01; %Observation error
R=sigma^2*eye(m,m);
inR=inv(R);
H = eye(n,n); 
% H = H(randperm(n,m),:);  %Matrix that maps the state space into the observation space

%===Simulation Parameters===
tsim=6; %Time steps simulation
dt=0.01; %step length

%=== DA parameters===
N=20; % Number of ensemble


%====Simulation====
%===Initialization===
xb=zeros(n,tsim,N); % Background State. Dimensions=(states,time,ensemble member)
xa=zeros(n,tsim,N); % Analysis State. Dimensions=(states,time,ensemble member)
Xb=zeros(n,N);
Yx=zeros(m,N);
%===Ensemble generation===
x0=rand(n,N); %The ensemble is generated by the initial condition
xb(:,1,:)=x0;
xa=xb;
for i=2:tsim
    for Nen=1:N %Propagation in time of all the ensemble members
        [xb(:,i,Nen),t]=Lorenz_96_one_step(1,dt,squeeze(xa(:,i-1,Nen)),F);  
    end
 meanxb=mean(xb(:,i,:),3); %Ensemble mean
 meanyb=H*meanxb;  %Model observation based on the ensemble mean
 d=H*Xreal(:,i)-meanyb+sigma*rand(1,1); %Innovation Matriz
    for Nen=1:N
       Xb(:,Nen)= xb(:,i,Nen)-meanxb;
       Yx(:,Nen)=H*xb(:,i,Nen)-meanyb; %Aproximation of H*M*Xb according with equation (38) 
    end
    Yx=Yx*sqrt(1/(N-1));
    Xb=Xb*sqrt(1/(N-1));
 %===Analysis step===
 Xensopt=(eye(N,1)+Yx'*inR*Yx)\Yx'*inR*d;
 
 meanxa=meanxb+Xb*Xensopt;
 Xensa=Xensopt+(eye(N,1)+Yx'*inR*Yx)^(1/2)*rand(N,1);
 for Nen=1:N
     xa(:,i,Nen)=meanxa+Xb(:,Nen)*Xensa(Nen);
 end
     xat(:,i)=meanxa;
end


% figure
% Nen=1:N;
% plot(squeeze(xb(5,:,Nen)))