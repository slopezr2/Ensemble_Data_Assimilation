%==== Script of 3DEnVar===
%=== Based in the Paper: "A review of operational methods of variational 
% and ensemble-variational data assimilation" R.N. Bannister
clear all
close all
clc

%==== Parameters====

%===Simulation Parameters===
tsim=1000; %Time steps simulation
dt=0.01; %step length

%===Model Parameters===
load Xreal %True state
L=load('SampleLorenz.mat');
tic
n=40; %Number of states
F=8; %External force

%===Observation Parameters===
p_obsersation=1;  %Fraction of observabled states
m=round(n*p_obsersation); % Number of observations
sigma=0.01; %Observation error
R=sigma^2*eye(m,m);
inR=(1/sigma^2)*eye(m,m);
H = eye(n,n); 
salidas=randperm(n,m);
H = H(salidas,:);  %Matrix that maps the state space into the observation space
y=zeros(m,tsim);
tipo=7;





%=== DA parameters===
N=100; % Number of ensemble
r=5; %Localization radius
global gam
gam=3; %Gamma observation operator
eps=0.01; %Tolerance rho calculation
q=round(log2(1/eps)); %Number of iterations rho calculation
inner=100; % Max Number of inner iterations
tolerance_inner=0.2;
add_inflation=0.02; % gam=3---add_inflation=0.01-0.02, gam=4---add_inflation=0.001-0.002, gam=4---add_inflation=0.0004-0.0005

%====Simulation====
%===Initialization===
xb=zeros(n,tsim,N); % Background State. Dimensions=(states,time,ensemble member)
xa=zeros(n,tsim,N); % Analysis State. Dimensions=(states,time,ensemble member)
Xb=zeros(n,N);

%===Ensemble generation===
x0=1*rand(n,N); %The ensemble is generated by the initial condition
xb(:,1,:)=x0;
xa=xb;
meanxb=mean(xb(:,1,:),3);
Hx = operador(salidas,meanxb,tipo);

meanxa(:,1)=meanxb;

for i=2:tsim
%===Outer Loop===    
    for Nen=1:N %Propagation in time of all the ensemble members
        [xb(:,i,Nen),t]=Lorenz_96_one_step(1,dt,squeeze(xa(:,i-1,Nen)),F);  
    end
 meanxb=mean(xb(:,i,:),3); %Ensemble mean
 for Nen=1:N
    Xb(:,Nen)= xb(:,i,Nen)-meanxb;  
 end
 Xb=Xb*sqrt(1/(N-1));   
 B=Calculo_B_Cholesky(Xb,r); %Estimation of Covariance by Modified Cholesky
 inB=Calculo_inB_Cholesky(Xb,r); %Estimation of invserse Covariance by Modified Cholesky
 Bsquare=B^(1/2);
 y(:,i)=operador(salidas,Xreal(:,i),tipo)+sigma*randn(1,1); % Observations
 %==Inner Loop==
     alpha(:,1)=rand(n,1);
     xk(:,1)=meanxb+Bsquare*alpha(:,1);
     H = linear_operador(salidas,meanxb,tipo);
     Q=H*Bsquare;
     yxk=operador(salidas,xk(:,1),tipo);
     d=y(:,i)-yxk;  %Innovation Matriz
     k=2;
     norma(1,i)=tolerance_inner;
     flaq=0;
      while norma(k-1,i)>=tolerance_inner && k<inner && flaq<2 
           
         alpha(:,k)= pinv((eye(n,1)+Q'*inR*Q))*(Q'*inR*d);
         %=Calculate of rho=
         
         [rho,J1,J2,J3]=rho_calculation(q,xk(:,k-1),Bsquare,alpha(:,k),y(:,i),inB,inR,H,meanxb);
         
         %=Incremental=
         xk(:,k)=xk(:,k-1)+rho*Bsquare*alpha(:,k);
         yxk=operador(salidas,xk(:,k),tipo);
         d=y(:,i)-yxk;
         norma(k,i)=norm(rho*Bsquare*alpha(:,k));
         if diff(norma(k-1:k,i))>0 
             flaq=flaq+1;          
         end
         if flaq==2
            alpha(:,k)=alpha(:,k-1); 
            xk(:,k)=xk(:,k-1);
         end
         k=k+1;
     end
     meanxa(:,i)=real(xk(:,end));
     mean(d);
     yxa(:,i)=operador(salidas,meanxa(:,i),tipo);
%==End Inner Loop==

%=Analysis ensemble calculation=
 for Nen=1:N
     alpha_a=alpha(:,end)+(eye(n,1)+Q'*inR*Q)^(1/2)*randn(n,1);
     xa(:,i,Nen)=real(meanxa(:,i)+rho*Bsquare*alpha_a)-add_inflation/2+add_inflation*rand(n,1);
 end
 process=i/tsim*100
end

toc
 
 figure
plot(Xreal(15,1:tsim))
hold on
plot(meanxa(15,1:tsim))
 figure
plot(Xreal(25,1:tsim))
hold on
plot(meanxa(25,1:tsim))
 figure
plot(Xreal(35,1:tsim))
hold on
plot(meanxa(35,1:tsim))
 figure
imagesc(Xreal(:,1:tsim)),caxis([-10 10]),colorbar
figure
imagesc(meanxa(:,1:tsim)),caxis([-10 10]),colorbar

% for i=1:length(salidas)
% figure
% plot(Xreal(salidas(i),1:tsim))
% hold on
% plot(meanxa(salidas(i),1:tsim))
% end