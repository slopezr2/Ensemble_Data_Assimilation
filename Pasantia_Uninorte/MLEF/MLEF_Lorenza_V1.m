%===MLEF algorithm for the Lorenz 96 Model based in (Zupanski,2005)===
%==Santiago Lopez-Restrepo, Alfonso Mantilla,  Elías D. Niño-Ruiz==

% clear all
% close all
clc
global C c C_T y i salidas meanxb Xb inR inR_square tipo
%==== Parameters====

%===Simulation Parameters===
tsim=500; %Time steps simulation
dt=0.01; %step length

%===Model Parameters===
load Xreal %True state
L=load('SampleLorenz.mat');
tic
n=40; %Number of states
F=8; %External force

%===Observation Parameters===
p_obsersation=1;  %Fraction of observabled states
m=round(n*p_obsersation); % Number of observations
sigma=0.01; %Observation error
R=sigma^2*eye(m,m);
inR=(1/sigma^2)*eye(m,m);
inR_square=inR^(1/2);
H = eye(n,n); 
salidas=randperm(n,m);
H = H(salidas,:);  %Matrix that maps the state space into the observation space

M=25;
y=zeros(m,tsim);
tipo=7;
frequency=1; % Frequency of observations
tsim=frequency*M;
muestreo=frequency:frequency:tsim;

%=== DA parameters===
N=80; % Number of ensemble
r=1; %Localization radius
global gam
gam=3; %Gamma observation operator

%====Simulation====
%===Initialization===
xb=zeros(n,tsim,N); % Background State. Dimensions=(states,time,ensemble member)
Xb=zeros(n,N);

%===Ensemble generation===
ensemble_sparse=10;
% x0=ensemble_sparse*rand(n,N); %The ensemble is generated by the initial condition
x0=L.XB(:,randperm(length(L.XB),N));
xb(:,1,:)=x0;
xa=xb;
meanxb=mean(xb(:,1,:),3);
Hx = operador(salidas,meanxb,tipo);
XB_time=zeros(n,N,tsim);
meanxa(:,1)=meanxb;
muestra=0;
alpha_opt=rand(N,1);
for i=2:tsim
    disp([num2str((i/tsim)*100),'%'])
%===Outer Loop===    
    for Nen=1:N %Propagation in time of all the ensemble members
        [xb(:,i,Nen),t]=Lorenz_96_one_step(1,dt,squeeze(xa(:,i-1,Nen)),F);     
    end
     meanxb=mean(xb(:,i,:),3); %Ensemble mean
     if sum(muestreo==i)   %Validation if there are a observation available
         muestra=muestra+1;
         for Nen=1:N
            Xb(:,Nen)= xb(:,i,Nen)-meanxb;  
         end
         
          Pf=Xb*Xb';
          for Nen=1:N %Propagation in time of all the ensemble members
          %==Calculation Matrix C, see equation (8) and (9)
            c(:,Nen)=inR_square*(operador(salidas,xb(:,i,Nen),tipo)-operador(salidas,meanxb,tipo));
          end
          
                C=c'*c;  %According with equation (9)

          [V,D] = eig(eye(N)+C);
          C_T=V*(inv(eye(length(D))+D)^(1/2))*V'; %According with equation (10)
         
         %=== Minimization===
         
           alpha=alpha_opt;
           [alpha_opt,niter(i),Jopt,gnorm]=Gradient_Descend(alpha);

         %====Analysis===
         meanxa(:,i)=meanxb+Xb*C_T*alpha_opt;

         for Nen=1:length(C) %Propagation in time of all the ensemble members
            %==Calculation Matrix C, see equation (8) and (9)
            c_opt(:,Nen)=inR_square*(operador(salidas,meanxa(:,i) + Xb(:,Nen),tipo)-operador(salidas,meanxa(:,i),tipo));
         end
         C_opt=c_opt'*c_opt;
         [V,D] = eig(eye(N)+C_opt);
         C_T_opt=V*(inv(eye(length(D))+D)^(1/2))*V'; %According with equation (10)
         Xa=real(Xb*C_T_opt);
         for Nen=1:N
             xa(:,i,Nen)=(meanxa(:,i)+Xa(:,Nen));
         end
         norma_error_muestras_x(:,muestra)=norm((Xreal(:,i)-meanxa(:,i))./Xreal(:,i),2);
     else
     xa(:,i,:)=xb(:,i,:);
     meanxa(:,i)=meanxb;
    end %End muestreo 
end

figure
semilogy(norma_error_muestras_x)
% for i=1:15
% figure
% plot(Xreal(salidas(i),1:tsim))
% hold on
% plot(meanxa(salidas(i),1:tsim))
% end